{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { Validators } from \"@angular/forms\";\nlet UpdateBusComponent = class UpdateBusComponent {\n  constructor(formBuilder, router, route, adminService, service) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.route = route;\n    this.adminService = adminService;\n    this.service = service;\n    this.adminUName = null;\n    this.adminDetails = null;\n    this.busNumber = null;\n    this.bus = null;\n    this.location = null;\n    this.busForm = this.formBuilder.group({\n      departureBusstop: [null, Validators.required],\n      arrivalBusstop: [null, Validators.required],\n      departureDate: [null, [Validators.required, this.departureDateValidator]],\n      arrivalDate: [null, [Validators.required]],\n      availableSeats: [null, [Validators.required, Validators.max(100), Validators.min(0)]],\n      arrivalTime: [null, Validators.required],\n      departureTime: [null, Validators.required],\n      busVendor: [null, Validators.required],\n      cost: [null, [Validators.required, Validators.min(1), Validators.max(10000)]]\n    }, {\n      validators: this.arrivalDateValidator\n    });\n  }\n\n  formatLocation(location) {\n    return `${location.terminal} ${location.city} ${location.state}`;\n  }\n\n  ngOnInit() {\n    this.adminUName = localStorage.getItem(\"adminUName\");\n\n    if (this.adminUName == null) {\n      this.router.navigate([\"/error\", \"admin not logged in login to continue\"]);\n    } else {\n      this.adminUName = this.adminUName;\n      this.adminService.getAdminDetails(this.adminUName).subscribe(data => {\n        this.adminDetails = data;\n        console.log(this.adminDetails);\n      }), this.route.paramMap.subscribe(param => {\n        this.busNumber = parseInt(param.get('busNumber'));\n      });\n    }\n\n    let response = this.service.getLocations();\n    response.subscribe(data => this.location = data);\n    console.log(this.location);\n    let busResponse = this.adminService.getBusById(this.busNumber);\n    busResponse.subscribe(data => {\n      this.bus = data;\n      console.log(data);\n      console.log(this.bus.departureBusstop);\n    });\n  }\n\n  logout() {\n    localStorage.removeItem(\"adminUName\");\n    this.router.navigate([\"/adminLogin\"]);\n  }\n\n  departureDateValidator(control) {\n    const inputDate = new Date(control.value);\n    const currentDate = new Date();\n\n    if (inputDate < currentDate) {\n      return {\n        dateError: true\n      };\n    }\n\n    return null;\n  }\n\n  arrivalDateValidator(control) {\n    const depDate = control.get(\"departureDate\");\n    const arrDate = control.get(\"arrivalDate\");\n\n    if (depDate && arrDate && new Date(depDate.value) > new Date(arrDate.value)) {\n      return {\n        arrivalDateError: true\n      };\n    } else {\n      return null;\n    }\n  }\n\n  onSubmit() {\n    let data = this.busForm.value;\n\n    if (this.busNumber != null) {\n      data.busNumber = this.busNumber;\n    }\n\n    this.adminService.modifyBus(data).subscribe(data => {\n      this.router.navigate([\"/adminHome\"]);\n    }, error => {\n      this.router.navigate([\"/error\", \"unable to update\"]);\n    });\n  }\n\n};\nUpdateBusComponent = __decorate([Component({\n  selector: \"app-update-bus\",\n  templateUrl: \"./update-bus.component.html\",\n  styleUrls: [\"./update-bus.component.css\"]\n})], UpdateBusComponent);\nexport { UpdateBusComponent };","map":null,"metadata":{},"sourceType":"module"}